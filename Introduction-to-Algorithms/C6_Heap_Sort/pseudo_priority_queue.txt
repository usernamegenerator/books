//return the max node. max heap always have the max node at root
HEAP-MAXIMUM(A)
    return A[i]

HEAP-EXTRACT-MAX(A)
    if A.heap_size < 1
        error "heap underflow"
    max = A[1]                              //take the max
    A[1] = A[A.heap_size]                   //exchange the smallest to the root
    A.heap_size = A. heap_size - 1
    MAX-HEAPIFY(A,1)                        //place the root into correct location
    return max

HEAP_INCREASE_KEY(A,i,key)
    if key < A[i]
        error "new key is smaller than current key"
    A[i] = key

    while i > 1 and A[PARENT(i)] < A[i]
        exchange A[i] with A[PARENT(i)]
        i = parent;

MAX-HEAP-INSERT(A,key)
    A.heap_size = A.heap_size + 1
    A[A.geap_size] = -infinite              //get a new node
    HEAP-INCREASE-KEY(A,A.heap_size,key)
